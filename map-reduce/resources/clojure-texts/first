If you’re new to Clojure then one of the first questions you might find yourself asking is, "Which library should I choose to read and write JSON?". The family of JSON libraries for Clojure has grown over the years, so let’s take a look at the options for working with JSON in Clojure and see how we can narrow down the field depending on the needs of your application.

As with most choices that relate to building software systems, there are trade-offs involved, so the choice will likely be driven by the context in which you’re working, including the demands on your application, your existing library choices, and the processes and principles of your organisation.

Clojure’s data API
When using typed languages like Java, Kotlin, or Scala, choosing a library to work with JSON often means choosing an API to interact with your data too. In the case of 'data binding' libraries this might be an API dictated by types you’ve created yourself. In other cases you might find a traversal API based on lenses or some other builder types and fluent chains of method calls.

Clojure famously encourages us to work with a small set of data types and the core of Clojure provides a wealth of functions for interacting with them. This typically means that no matter what library we use for parsing a JSON object, we know that our destination is a Clojure map and therefore our choice of JSON parsing library doesn’t dictate our data API. This is good news because when using Clojure your choice of JSON library won’t significantly affect your application code, your style of programming, or the readability of your data interactions. That said, let’s discuss some of the pros and cons of Clojure’s JSON libraries (both popular and niche) and summarise the state of this small area of the wider ecosystem.